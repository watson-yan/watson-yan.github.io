<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>watson yan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huayan.site/"/>
  <updated>2017-06-15T03:37:42.000Z</updated>
  <id>http://huayan.site/</id>
  
  <author>
    <name>watson yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript角度理解发布订阅者模式</title>
    <link href="http://huayan.site/2017/06/14/Javascript%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://huayan.site/2017/06/14/Javascript角度理解发布订阅者模式/</id>
    <published>2017-06-14T08:51:22.000Z</published>
    <updated>2017-06-15T03:37:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/tugenhua0707/p/4687947.html" target="_blank" rel="external">原文地址</a></p>
<h3 id="发布订阅模式介绍"><a href="#发布订阅模式介绍" class="headerlink" title="发布订阅模式介绍"></a>发布订阅模式介绍</h3><blockquote>
<p>发布订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。</p>
</blockquote>
<h4 id="现实生活中的发布-订阅模式；"><a href="#现实生活中的发布-订阅模式；" class="headerlink" title="现实生活中的发布-订阅模式；"></a>现实生活中的发布-订阅模式；</h4><p>比如小红最近在淘宝网上看上一双鞋子，但是呢 联系到卖家后，才发现这双鞋卖光了，但是小红对这双鞋又非常喜欢，所以呢联系卖家，问卖家什么时候有货，卖家告诉她，要等一个星期后才有货，卖家告诉小红，要是你喜欢的话，你可以收藏我们的店铺，等有货的时候再通知你，所以小红收藏了此店铺，但与此同时，小明，小花等也喜欢这双鞋，也收藏了该店铺；等来货的时候就依次会通知他们；</p>
<p>在上面的故事中，可以看出是一个典型的发布订阅模式，卖家是属于发布者，小红，小明等属于订阅者，订阅该店铺，卖家作为发布者，当鞋子到了的时候，会依次通知小明，小红等，依次使用旺旺等工具给他们发布消息；</p>
<h4 id="发布订阅模式的优点："><a href="#发布订阅模式的优点：" class="headerlink" title="发布订阅模式的优点："></a>发布订阅模式的优点：</h4><ol>
<li><p>支持简单的广播通信，当对象状态发生改变时，会自动通知已经订阅过的对象。<br>比如上面的列子，小明，小红不需要天天逛淘宝网看鞋子到了没有，在合适的时间点，发布者(卖家)来货了的时候，会通知该订阅者(小红，小明等人)。</p>
</li>
<li><p>发布者与订阅者耦合性降低，发布者只管发布一条消息出去，它不关心这条消息如何被订阅者使用，同时，订阅者只监听发布者的事件名，只要发布者的事件名不变，它不管发布者如何改变；同理卖家（发布者）它只需要将鞋子来货的这件事告诉订阅者(买家)，他不管买家到底买还是不买，还是买其他卖家的。只要鞋子到货了就通知订阅者即可。</p>
</li>
</ol>
<p>对于第一点，我们日常工作中也经常使用到，比如我们的ajax请求，请求有成功(success)和失败(error)的回调函数，我们可以订阅ajax的success和error事件。我们并不关心对象在异步运行的状态，我们只关心success的时候或者error的时候我们要做点我们自己的事情就可以了~</p>
<h4 id="发布订阅模式的缺点："><a href="#发布订阅模式的缺点：" class="headerlink" title="发布订阅模式的缺点："></a>发布订阅模式的缺点：</h4><ul>
<li>创建订阅者需要消耗一定的时间和内存。</li>
<li>虽然可以弱化对象之间的联系，如果过度使用的话，反而使代码不好理解及代码不好维护等等</li>
</ul>
<h3 id="如何实现发布–订阅模式？"><a href="#如何实现发布–订阅模式？" class="headerlink" title="如何实现发布–订阅模式？"></a>如何实现发布–订阅模式？</h3><ol>
<li>首先要想好谁是发布者(比如上面的卖家)。</li>
<li>然后给发布者添加一个缓存列表，用于存放回调函数来通知订阅者(比如上面的买家收藏了卖家的店铺，卖家通过收藏了该店铺的一个列表名单)。</li>
<li>最后就是发布消息，发布者遍历这个缓存列表，依次触发里面存放的订阅者回调函数。</li>
</ol>
<p>我们还可以在回调函数里面添加一点参数，比如鞋子的颜色，鞋子尺码等信息；</p>
<p>我们先来实现下简单的发布-订阅模式；代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;; <span class="comment">// 定义发布者</span></div><div class="line">shoeObj.list = []; <span class="comment">// 缓存列表 存放订阅者回调函数</span></div><div class="line">        </div><div class="line"><span class="comment">// 增加订阅者</span></div><div class="line">shoeObj.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    shoeObj.list.push(fn);  <span class="comment">// 订阅消息添加到缓存列表</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发布消息</span></div><div class="line">shoeObj.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = <span class="keyword">this</span>.list[i++];) &#123;</div><div class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 小红订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="function"><span class="keyword">function</span>(<span class="params">color,size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"颜色是："</span>+color);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+size);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 小花订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="function"><span class="keyword">function</span>(<span class="params">color,size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印颜色是："</span>+color);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+size); </div><div class="line">&#125;);</div><div class="line">shoeObj.trigger(<span class="string">"红色"</span>,<span class="number">40</span>);</div><div class="line">shoeObj.trigger(<span class="string">"黑色"</span>,<span class="number">42</span>);</div></pre></td></tr></table></figure></p>
<p><img src="./01.png"><br>打印如上截图，我们看到订阅者接收到发布者的每个消息，但是呢，对于小红来说，她只想接收颜色为红色的消息，不想接收颜色为黑色的消息，为此我们需要对代码进行如下改造下，我们可以先增加一个key，使订阅者只订阅自己感兴趣的消息。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;; <span class="comment">// 定义发布者</span></div><div class="line">shoeObj.list = []; <span class="comment">// 缓存列表 存放订阅者回调函数</span></div><div class="line">        </div><div class="line"><span class="comment">// 增加订阅者</span></div><div class="line">shoeObj.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.list[key]) &#123;</div><div class="line">        <span class="comment">// 如果还没有订阅过此类消息，给该类消息创建一个缓存列表</span></div><div class="line">        <span class="keyword">this</span>.list[key] = []; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.list[key].push(fn);  <span class="comment">// 订阅消息添加到缓存列表</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发布消息</span></div><div class="line">shoeObj.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>); <span class="comment">// 取出消息类型名称</span></div><div class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];  <span class="comment">// 取出该消息对应的回调函数的集合</span></div><div class="line"></div><div class="line">    <span class="comment">// 如果没有订阅过该消息的话，则返回</span></div><div class="line">    <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = fns[i++]; ) &#123;</div><div class="line">        fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>); <span class="comment">// arguments 是发布消息时附送的参数</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 小红订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'red'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+size);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 小花订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'block'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+size); </div><div class="line">&#125;);</div><div class="line">shoeObj.trigger(<span class="string">"red"</span>,<span class="number">40</span>);</div><div class="line">shoeObj.trigger(<span class="string">"block"</span>,<span class="number">42</span>);</div></pre></td></tr></table></figure>
<p>上面的代码，我们再来运行打印下 如下：<br><img src="./02.png"><br>可以看到，订阅者只订阅自己感兴趣的消息了；</p>
<h3 id="发布—订阅模式的代码封装"><a href="#发布—订阅模式的代码封装" class="headerlink" title="发布—订阅模式的代码封装"></a>发布—订阅模式的代码封装</h3><p>我们知道，对于上面的代码，小红去买鞋这么一个对象shoeObj 进行订阅，但是如果以后我们需要对买房子或者其他的对象进行订阅呢，我们需要复制上面的代码，再重新改下里面的对象代码；为此我们需要进行代码封装；</p>
<p>如下代码封装：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> event = &#123;</div><div class="line">    <span class="attr">list</span>: [],</div><div class="line">    <span class="attr">listen</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.list[key]) &#123;</div><div class="line">            <span class="keyword">this</span>.list[key] = [];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 订阅的消息添加到缓存列表中</span></div><div class="line">        <span class="keyword">this</span>.list[key].push(fn);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">trigger</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</div><div class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];</div><div class="line">        <span class="comment">// 如果没有订阅过该消息的话，则返回</span></div><div class="line">        <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,fn; fn = fns[i++];) &#123;</div><div class="line">            fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我们在定义一个initEvent函数，这个函数使所有的普通对象都具有发布订阅功能，如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> initEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</div><div class="line">        obj[i] = event[i];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 我们再来测试下，我们还是给shoeObj这个对象添加发布-订阅功能；</span></div><div class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;;</div><div class="line">initEvent(shoeObj);</div><div class="line"></div><div class="line"><span class="comment">// 小红订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'red'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+size);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 小花订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'block'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+size); </div><div class="line">&#125;);</div><div class="line">shoeObj.trigger(<span class="string">"red"</span>,<span class="number">40</span>);</div><div class="line">shoeObj.trigger(<span class="string">"block"</span>,<span class="number">42</span>);</div></pre></td></tr></table></figure>
<h3 id="如何取消订阅事件？"><a href="#如何取消订阅事件？" class="headerlink" title="如何取消订阅事件？"></a>如何取消订阅事件？</h3><p>比如上面的列子，小红她突然不想买鞋子了，那么对于卖家的店铺他不想再接受该店铺的消息，那么小红可以取消该店铺的订阅。</p>
<p>如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">event.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.list[key];</div><div class="line">    <span class="comment">// 如果key对应的消息没有订阅过的话，则返回</span></div><div class="line">    <span class="keyword">if</span>(!fns) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果没有传入具体的回调函数，表示需要取消key对应消息的所有订阅</span></div><div class="line">    <span class="keyword">if</span>(!fn) &#123;</div><div class="line">        fn &amp;&amp; (fns.length = <span class="number">0</span>);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">var</span> _fn = fns[i];</div><div class="line">            <span class="keyword">if</span>(_fn === fn) &#123;</div><div class="line">                fns.splice(i,<span class="number">1</span>); <span class="comment">// 删除订阅者的回调函数</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>测试代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> initEvent = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</div><div class="line">        obj[i] = event[i];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> shoeObj = &#123;&#125;;</div><div class="line">initEvent(shoeObj);</div><div class="line"></div><div class="line"><span class="comment">// 小红订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'red'</span>,fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码是："</span>+size);  </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 小花订阅如下消息</span></div><div class="line">shoeObj.listen(<span class="string">'red'</span>,fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">size</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"再次打印尺码是："</span>+size); </div><div class="line">&#125;);</div><div class="line">shoeObj.remove(<span class="string">"red"</span>,fn1);</div><div class="line">shoeObj.trigger(<span class="string">"red"</span>,<span class="number">42</span>);</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><img src="./03.png"></p>
<h3 id="全局–发布订阅对象代码封装"><a href="#全局–发布订阅对象代码封装" class="headerlink" title="全局–发布订阅对象代码封装"></a>全局–发布订阅对象代码封装</h3><p>我们再来看看我们传统的ajax请求吧，比如我们传统的ajax请求，请求成功后需要做如下事情：</p>
<ol>
<li>渲染数据。</li>
<li>使用数据来做一个动画。</li>
</ol>
<p>那么我们以前肯定是如下写代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$.ajax(“http:<span class="comment">//127.0.0.1/index.php”,function(data)&#123;</span></div><div class="line">    rendedData(data);  <span class="comment">// 渲染数据</span></div><div class="line">    doAnimate(data);  <span class="comment">// 实现动画 </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>假如以后还需要做点事情的话，我们还需要在里面写调用的方法；这样代码就耦合性很高，那么我们现在使用发布-订阅模式来看如何重构上面的业务需求代码；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$.ajax(“http:<span class="comment">//127.0.0.1/index.php”,function(data)&#123;</span></div><div class="line">    Obj.trigger(‘success’,data);  <span class="comment">// 发布请求成功后的消息</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 下面我们来订阅此消息，比如我现在订阅渲染数据这个消息；</span></div><div class="line">Obj.listen(“success”,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   renderData(data);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 订阅动画这个消息</span></div><div class="line">Obj.listen(“success”,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   doAnimate(data); </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>为此我们可以封装一个全局发布-订阅模式对象；如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = &#123;&#125;,</div><div class="line">          listen,</div><div class="line">          trigger,</div><div class="line">          remove;</div><div class="line">          listen = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!list[key]) &#123;</div><div class="line">                list[key] = [];</div><div class="line">            &#125;</div><div class="line">            list[key].push(fn);</div><div class="line">        &#125;;</div><div class="line">        trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</div><div class="line">                 fns = list[key];</div><div class="line">            <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</div><div class="line">                fn.apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        remove = <span class="function"><span class="keyword">function</span>(<span class="params">key,fn</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> fns = list[key];</div><div class="line">            <span class="keyword">if</span>(!fns) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!fn) &#123;</div><div class="line">                fns &amp;&amp; (fns.length = <span class="number">0</span>);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = fns.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">                    <span class="keyword">var</span> _fn = fns[i];</div><div class="line">                    <span class="keyword">if</span>(_fn === fn) &#123;</div><div class="line">                        fns.splice(i,<span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">listen</span>: listen,</div><div class="line">            <span class="attr">trigger</span>: trigger,</div><div class="line">            <span class="attr">remove</span>: remove</div><div class="line">        &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 测试代码如下：</span></div><div class="line">Event.listen(<span class="string">"color"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"尺码为:"</span>+size); <span class="comment">// 打印出尺码为42</span></div><div class="line">&#125;);</div><div class="line">Event.trigger(<span class="string">"color"</span>,<span class="number">42</span>);</div></pre></td></tr></table></figure></p>
<h3 id="理解模块间通信"><a href="#理解模块间通信" class="headerlink" title="理解模块间通信"></a>理解模块间通信</h3><p>我们使用上面封装的全局的发布-订阅对象来实现两个模块之间的通信问题；比如现在有一个页面有一个按钮，每次点击此按钮后，div中会显示此按钮被点击的总次数；如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span>点将我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showcount"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们中的a.js 负责处理点击操作 及 发布消息；如下JS代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">"count"</span>);</div><div class="line">    button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        Event.trigger(<span class="string">"add"</span>,count++);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>b.js 负责监听add这个消息，并把点击的总次数显示到页面上来；如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"showcount"</span>);</div><div class="line">    Event.listen(<span class="string">'add'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">        div.innerHTML = count;</div><div class="line">    &#125;);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>下面是html代码如下，JS应用如下引用即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"global.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span>点将我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"showcount"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"a.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">"b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如上代码，当点击一次按钮后，showcount的div会自动加1，如上演示的是2个模块之间如何使用发布-订阅模式之间的通信问题；</p>
<p>其中global.js 就是我们上面封装的全局-发布订阅模式对象的封装代码；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/tugenhua0707/p/4687947.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;发布订阅模式介绍&quot;&gt;&lt;a href=&quot;#发布订阅
    
    </summary>
    
    
      <category term="设计模式" scheme="http://huayan.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript深入之从原型到原型链</title>
    <link href="http://huayan.site/2017/05/21/JavaScript%E6%B7%B1%E5%85%A5%E4%B9%8B%E4%BB%8E%E5%8E%9F%E5%9E%8B%E5%88%B0%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://huayan.site/2017/05/21/JavaScript深入之从原型到原型链/</id>
    <published>2017-05-21T08:51:22.000Z</published>
    <updated>2017-06-03T16:12:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript深入之从原型到原型链"><a href="#JavaScript深入之从原型到原型链" class="headerlink" title="JavaScript深入之从原型到原型链"></a>JavaScript深入之从原型到原型链</h1><p>原文出处： <a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="external">冴羽</a></p>
<blockquote>
<p>JavaScript深入系列的第一篇，从原型与原型链开始讲起，如果你想知道构造函数的实例的原型，原型的原型，原型的原型的原型是什么，就来看看这篇文章吧。</p>
</blockquote>
<h2 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h2><p>我们先使用构造函数创建一个对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line">person.name = <span class="string">'Kevin'</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></div></pre></td></tr></table></figure>
<p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p>
<p>很简单吧，接下来进入正题：</p>
<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 虽然写在注释里，但是你要注意：</span></div><div class="line"><span class="comment">// prototype是函数才会有的属性</span></div><div class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">// Kevin</span></div><div class="line"><span class="built_in">console</span>.log(person2.name) <span class="comment">// Kevin</span></div></pre></td></tr></table></figure>
<p>那这个函数的 prototype 属性到底指向的是什么呢？是这个函数的原型吗？</p>
<p>其实，函数的 prototype 属性指向了一个对象，这个对象正是调用该构造函数而创建的<strong>实例</strong>的原型，也就是这个例子中的 person1 和 person2 的原型。</p>
<p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p>
<p>让我们用一张图表示构造函数和实例原型之间的关系：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype1.png" alt="构造函数和实例原型的关系图" title="">
                </div>
                <div class="image-caption">构造函数和实例原型的关系图</div>
            </figure>
<p>在这张图中我们用 Object.prototype 表示实例原型。</p>
<p>那么我们该怎么表示实例与实例原型，也就是 person 和 Person.prototype 之间的关系呢，这时候我们就要讲到第二个属性：</p>
<h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫__proto__，这个属性会指向该对象的原型。</p>
<p>为了证明这一点,我们可以在火狐或者谷歌中输入：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>于是我们更新下关系图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype2.png" alt="实例与实例原型的关系图" title="">
                </div>
                <div class="image-caption">实例与实例原型的关系图</div>
            </figure>
<p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p>
<h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：constructor﻿，每个原型都有一个 constructor 属性指向关联的构造函数。</p>
<p>为了验证这一点，我们可以尝试：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>所以再更新下关系图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype3.png" alt="实例原型与构造函数的关系图" title="">
                </div>
                <div class="image-caption">实例原型与构造函数的关系图</div>
            </figure>
<p>综上我们已经得出：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person.__proto__ == Person.prototype) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person) <span class="comment">// true</span></div><div class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p>
<h2 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p>
<p>举个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person.name = <span class="string">'Daisy'</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Daisy</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person.name;</div><div class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></div></pre></td></tr></table></figure>
<p>在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。</p>
<p>但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person.__proto__ ，也就是 Person.prototype中查找，幸运的是我们找到了  name 属性，结果为 Kevin。</p>
<p>但是万一还没有找到呢？原型的原型又是什么呢？</p>
<h2 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h2><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.name = <span class="string">'Kevin'</span></div><div class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Kevin</span></div></pre></td></tr></table></figure>
<p>所以原型对象是通过 Object 构造函数生成的，结合之前所讲，实例的 __proto__ 指向构造函数的 prototype ，所以我们再更新下关系图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype4.png" alt="原型的原型关系图" title="">
                </div>
                <div class="image-caption">原型的原型关系图</div>
            </figure>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>那 Object.prototype 的原型呢？</p>
<p>null，不信我们可以打印：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>所以查到属性的时候查到 Object.prototype 就可以停止查找了。</p>
<p>所以最后一张关系图就是</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype5.png" alt="原型链示意图" title="">
                </div>
                <div class="image-caption">原型链示意图</div>
            </figure>
<p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>最后，补充三点大家可能不会注意的地方：</p>
<h3 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h3><p>首先是 constructor 属性，我们看个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log(person.constructor === Person); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person.constructor === Person.prototype.constructor</div></pre></td></tr></table></figure>
<h3 id="proto-1"><a href="#proto-1" class="headerlink" title="__proto__"></a>__proto__</h3><p>其次是 __proto__ ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.__proto__ 时，可以理解成返回了 Object.getPrototypeOf(obj)。</p>
<h3 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h3><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p>
<p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p>
<h2 id="下一篇文章"><a href="#下一篇文章" class="headerlink" title="下一篇文章"></a>下一篇文章</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="external">JavaScript深入之词法作用域和动态作用域</a></p>
<h2 id="深入系列"><a href="#深入系列" class="headerlink" title="深入系列"></a>深入系列</h2><p>JavaScript深入系列目录地址：<a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="external">https://github.com/mqyqingfeng/Blog</a>。</p>
<p>JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、this、闭包、按值传递、call、apply、bind、new、继承等难点概念。</p>
<p>如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript深入之从原型到原型链&quot;&gt;&lt;a href=&quot;#JavaScript深入之从原型到原型链&quot; class=&quot;headerlink&quot; title=&quot;JavaScript深入之从原型到原型链&quot;&gt;&lt;/a&gt;JavaScript深入之从原型到原型链&lt;/h1&gt;&lt;
    
    </summary>
    
    
      <category term="原型" scheme="http://huayan.site/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://huayan.site/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="prototype" scheme="http://huayan.site/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面试中常见算法问题详解</title>
    <link href="http://huayan.site/2017/05/15/JavaScript-%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://huayan.site/2017/05/15/JavaScript-面试中常见算法问题详解/</id>
    <published>2017-05-15T08:51:22.000Z</published>
    <updated>2017-05-17T13:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000008397935" target="_blank" rel="external">原文出处：王下邀月熊_Chevalier</a></p>
<h3 id="JavaScript-Specification"><a href="#JavaScript-Specification" class="headerlink" title="JavaScript Specification"></a>JavaScript Specification</h3><h4 id="阐述下-JavaScript-中的变量提升"><a href="#阐述下-JavaScript-中的变量提升" class="headerlink" title="阐述下 JavaScript 中的变量提升"></a>阐述下 JavaScript 中的变量提升</h4><p>所谓提升，顾名思义即是 JavaScript 会将所有的声明提升到当前作用域的顶部。这也就意味着我们可以在某个变量声明前就使用该变量，不过虽然 JavaScript 会将声明提升到顶部，但是并不会执行真的初始化过程。</p>
<h4 id="阐述下-use-strict-的作用"><a href="#阐述下-use-strict-的作用" class="headerlink" title="阐述下 use strict; 的作用"></a>阐述下 use strict; 的作用</h4><p>use strict; 顾名思义也就是 JavaScript 会在所谓严格模式下执行，其一个主要的优势在于能够强制开发者避免使用未声明的变量。对于老版本的浏览器或者执行引擎则会自动忽略该指令。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Example of strict mode</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">catchThemAll();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">catchThemAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  x = <span class="number">3.14</span>; <span class="comment">// Error will be thrown</span></div><div class="line">  <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="解释下什么是-Event-Bubbling-以及如何避免"><a href="#解释下什么是-Event-Bubbling-以及如何避免" class="headerlink" title="解释下什么是 Event Bubbling 以及如何避免"></a>解释下什么是 Event Bubbling 以及如何避免</h4><p>Event Bubbling 即指某个事件不仅会触发当前元素，还会以嵌套顺序传递到父元素中。直观而言就是对于某个子元素的点击事件同样会被父元素的点击事件处理器捕获。避免 Event Bubbling 的方式可以使用event.stopPropagation() 或者 IE 9 以下使用event.cancelBubble。</p>
<p>== 与 === 的区别是什么<br>=== 也就是所谓的严格比较，关键的区别在于=== 会同时比较类型与值，而不是仅比较值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Example of comparators</div><div class="line">0 == false; // true</div><div class="line">0 === false; // false</div><div class="line"></div><div class="line">2 == &apos;2&apos;; // true</div><div class="line">2 === &apos;2&apos;; // false</div></pre></td></tr></table></figure></p>
<h4 id="解释下-null-与-undefined-的区别"><a href="#解释下-null-与-undefined-的区别" class="headerlink" title="解释下 null 与 undefined 的区别"></a>解释下 null 与 undefined 的区别</h4><p>JavaScript 中，null 是一个可以被分配的值，设置为 null 的变量意味着其无值。而 undefined 则代表着某个变量虽然声明了但是尚未进行过任何赋值。</p>
<h4 id="解释下-Prototypal-Inheritance-与-Classical-Inheritance-的区别"><a href="#解释下-Prototypal-Inheritance-与-Classical-Inheritance-的区别" class="headerlink" title="解释下 Prototypal Inheritance 与 Classical Inheritance 的区别"></a>解释下 Prototypal Inheritance 与 Classical Inheritance 的区别</h4><p>在类继承中，类是不可变的，不同的语言中对于多继承的支持也不一样，有些语言中还支持接口、final、abstract 的概念。而原型继承则更为灵活，原型本身是可以可变的，并且对象可能继承自多个原型。</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>找出整型数组中乘积最大的三个数<br>给定一个包含整数的无序数组，要求找出乘积最大的三个数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unsorted_array = [<span class="number">-10</span>, <span class="number">7</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">-10</span>, <span class="number">-70</span>];</div><div class="line"></div><div class="line">computeProduct(unsorted_array); <span class="comment">// 21000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortIntegers</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// greatest product is either (min1 * min2 * max1 || max1 * max2 * max3)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeProduct</span>(<span class="params">unsorted</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sorted_array = unsorted.sort(sortIntegers),</div><div class="line">    product1 = <span class="number">1</span>,</div><div class="line">    product2 = <span class="number">1</span>,</div><div class="line">    array_n_element = sorted_array.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Get the product of three largest integers in sorted array</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = array_n_element; x &gt; array_n_element - <span class="number">3</span>; x--) &#123;</div><div class="line">      product1 = product1 * sorted_array[x];</div><div class="line">  &#125;</div><div class="line">  product2 = sorted_array[<span class="number">0</span>] * sorted_array[<span class="number">1</span>] * sorted_array[array_n_element];</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (product1 &gt; product2) <span class="keyword">return</span> product1;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> product2</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="寻找连续数组中的缺失数"><a href="#寻找连续数组中的缺失数" class="headerlink" title="寻找连续数组中的缺失数"></a>寻找连续数组中的缺失数</h4><blockquote>
<p>给定某无序数组，其包含了 n 个连续数字中的 n - 1 个，已知上下边界，要求以O(n)的复杂度找出缺失的数字。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The output of the function should be 8</span></div><div class="line"><span class="keyword">var</span> array_of_integers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>];</div><div class="line"><span class="keyword">var</span> upper_bound = <span class="number">9</span>;</div><div class="line"><span class="keyword">var</span> lower_bound = <span class="number">1</span>;</div><div class="line"></div><div class="line">findMissingNumber(array_of_integers, upper_bound, lower_bound); <span class="comment">//8</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMissingNumber</span>(<span class="params">array_of_integers, upper_bound, lower_bound</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Iterate through array to find the sum of the numbers</span></div><div class="line">  <span class="keyword">var</span> sum_of_integers = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array_of_integers.length; i++) &#123;</div><div class="line">    sum_of_integers += array_of_integers[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 以高斯求和公式计算理论上的数组和</span></div><div class="line">  <span class="comment">// Formula: [(N * (N + 1)) / 2] - [(M * (M - 1)) / 2];</span></div><div class="line">  <span class="comment">// N is the upper bound and M is the lower bound</span></div><div class="line"></div><div class="line">  upper_limit_sum = (upper_bound * (upper_bound + <span class="number">1</span>)) / <span class="number">2</span>;</div><div class="line">  lower_limit_sum = (lower_bound * (lower_bound - <span class="number">1</span>)) / <span class="number">2</span>;</div><div class="line"></div><div class="line">  theoretical_sum = upper_limit_sum - lower_limit_sum;</div><div class="line"></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="keyword">return</span> (theoretical_sum - sum_of_integers)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><blockquote>
<p>给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6 Implementation</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array)); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ES5 Implementation</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>];</div><div class="line"></div><div class="line">uniqueArray(array); <span class="comment">// [1, 2, 3, 5, 9, 8]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueArray</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hashmap = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> unique = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</div><div class="line">    <span class="comment">// If key returns null (unique), it is evaluated as false.</span></div><div class="line">    <span class="keyword">if</span>(!hashmap.hasOwnProperty([array[i]])) &#123;</div><div class="line">      hashmap[array[i]] = <span class="number">1</span>;</div><div class="line">      unique.push(array[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> unique;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="数组中元素最大差值计算"><a href="#数组中元素最大差值计算" class="headerlink" title="数组中元素最大差值计算"></a>数组中元素最大差值计算</h4><blockquote>
<p>给定某无序数组，求取任意两个元素之间的最大差值，注意，这里要求差值计算中较小的元素下标必须小于较大元素的下标。譬如[7, 8, 4, 9, 9, 15, 3, 1, 10]这个数组的计算值是 11( 15 - 4 ) 而不是 14(15 - 1)，因为 15 的下标小于 1。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">10</span>];</div><div class="line"><span class="comment">// [7, 8, 4, 9, 9, 15, 3, 1, 10] would return `11` based on the difference between `4` and `15`</span></div><div class="line"><span class="comment">// Notice: It is not `14` from the difference between `15` and `1` because 15 comes before 1.</span></div><div class="line"></div><div class="line">findLargestDifference(array);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargestDifference</span>(<span class="params">array</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 如果数组仅有一个元素，则直接返回 -1</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">  <span class="comment">// current_min 指向当前的最小值</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> current_min = array[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> current_max_difference = <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 遍历整个数组以求取当前最大差值，如果发现某个最大差值，则将新的值覆盖 current_max_difference</span></div><div class="line">  <span class="comment">// 同时也会追踪当前数组中的最小值，从而保证 `largest value in future` - `smallest value before it`</span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span> (array[i] &gt; current_min &amp;&amp; (array[i] - current_min &gt; current_max_difference)) &#123;</div><div class="line">      current_max_difference = array[i] - current_min;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[i] &lt;= current_min) &#123;</div><div class="line">      current_min = array[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// If negative or 0, there is no largest difference</span></div><div class="line">  <span class="keyword">if</span> (current_max_difference &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> current_max_difference;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数组中元素乘积"><a href="#数组中元素乘积" class="headerlink" title="数组中元素乘积"></a>数组中元素乘积</h4><blockquote>
<p>给定某无序数组，要求返回新数组 output ，其中 output[i] 为原数组中除了下标为 i 的元素之外的元素乘积，要求以 O(n) 复杂度实现：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstArray = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> secondArray = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> thirdArray = [<span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line">productExceptSelf(firstArray); <span class="comment">// [8, 8, 4, 16]</span></div><div class="line">productExceptSelf(secondArray); <span class="comment">// [0, 0, 0, 0]</span></div><div class="line">productExceptSelf(thirdArray); <span class="comment">// [12, 12, 8, -12]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">productExceptSelf</span>(<span class="params">numArray</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> size = numArray.length;</div><div class="line">  <span class="keyword">var</span> output = [];</div><div class="line"></div><div class="line">  <span class="comment">// From first array: [1, 2, 4, 16]</span></div><div class="line">  <span class="comment">// The last number in this case is already in the right spot (allows for us)</span></div><div class="line">  <span class="comment">// to just multiply by 1 in the next step.</span></div><div class="line">  <span class="comment">// This step essentially gets the product to the left of the index at index + 1</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; size; x++) &#123;</div><div class="line">      output.push(product);</div><div class="line">      product = product * numArray[x];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// From the back, we multiply the current output element (which represents the product</span></div><div class="line">  <span class="comment">// on the left of the index, and multiplies it by the product on the right of the element)</span></div><div class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = size - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</div><div class="line">      output[i] = output[i] * product;</div><div class="line">      product = product * numArray[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h4><blockquote>
<p>给定两个数组，要求求出两个数组的交集，注意，交集中的元素应该是唯一的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstArray = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> secondArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line">intersection(firstArray, secondArray); <span class="comment">// [2, 1]</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">firstArray, secondArray</span>) </span>&#123;</div><div class="line">  <span class="comment">// The logic here is to create a hashmap with the elements of the firstArray as the keys.</span></div><div class="line">  <span class="comment">// After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash</span></div><div class="line">  <span class="comment">// If it does exist, add that element to the new array.</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> hashmap = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> intersectionArray = [];</div><div class="line"></div><div class="line">  firstArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    hashmap[element] = <span class="number">1</span>;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added</span></div><div class="line">  secondArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hashmap[element] === <span class="number">1</span>) &#123;</div><div class="line">      intersectionArray.push(element);</div><div class="line">      hashmap[element]++;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> intersectionArray;</div><div class="line"></div><div class="line">  <span class="comment">// Time complexity O(n), Space complexity O(n)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><blockquote>
<p>颠倒字符串<br>给定某个字符串，要求将其中单词倒转之后然后输出，譬如”Welcome to this Javascript Guide!” 应该输出为 “emocleW ot siht tpircsavaJ !ediuG”。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> string = <span class="string">"Welcome to this Javascript Guide!"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Output becomes !ediuG tpircsavaJ siht ot emocleW</span></div><div class="line"><span class="keyword">var</span> reverseEntireSentence = reverseBySeparator(string, <span class="string">""</span>);</div><div class="line"></div><div class="line"><span class="comment">// Output becomes emocleW ot siht tpircsavaJ !ediuG</span></div><div class="line"><span class="keyword">var</span> reverseEachWord = reverseBySeparator(reverseEntireSentence, <span class="string">" "</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseBySeparator</span>(<span class="params">string, separator</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> string.split(separator).reverse().join(separator);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="乱序同字母字符串"><a href="#乱序同字母字符串" class="headerlink" title="乱序同字母字符串"></a>乱序同字母字符串</h4><blockquote>
<p>给定两个字符串，判断是否颠倒字母而成的字符串，譬如Mary与Army就是同字母而顺序颠倒：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstWord = <span class="string">"Mary"</span>;</div><div class="line"><span class="keyword">var</span> secondWord = <span class="string">"Army"</span>;</div><div class="line"></div><div class="line">isAnagram(firstWord, secondWord); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">first, second</span>) </span>&#123;</div><div class="line">  <span class="comment">// For case insensitivity, change both words to lowercase.</span></div><div class="line">  <span class="keyword">var</span> a = first.toLowerCase();</div><div class="line">  <span class="keyword">var</span> b = second.toLowerCase();</div><div class="line"></div><div class="line">  <span class="comment">// Sort the strings, and join the resulting array to a string. Compare the results</span></div><div class="line">  a = a.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</div><div class="line">  b = b.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> a === b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="会问字符串"><a href="#会问字符串" class="headerlink" title="会问字符串"></a>会问字符串</h4><blockquote>
<p>判断某个字符串是否为回文字符串，譬如racecar与race car都是回文字符串：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">isPalindrome(<span class="string">"racecar"</span>); <span class="comment">// true</span></div><div class="line">isPalindrome(<span class="string">"race Car"</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="comment">// Replace all non-letter chars with "" and change to lowercase</span></div><div class="line">  <span class="keyword">var</span> lettersOnly = word.toLowerCase().replace(<span class="regexp">/\s/g</span>, <span class="string">""</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Compare the string with the reversed version of the string</span></div><div class="line">  <span class="keyword">return</span> lettersOnly === lettersOnly.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h4><blockquote>
<p>使用两个栈实现入队与出队</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputStack = []; <span class="comment">// First stack</span></div><div class="line"><span class="keyword">var</span> outputStack = []; <span class="comment">// Second stack</span></div><div class="line"></div><div class="line"><span class="comment">// For enqueue, just push the item into the first stack</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">stackInput, item</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> stackInput.push(item);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params">stackInput, stackOutput</span>) </span>&#123;</div><div class="line">  <span class="comment">// Reverse the stack such that the first element of the output stack is the</span></div><div class="line">  <span class="comment">// last element of the input stack. After that, pop the top of the output to</span></div><div class="line">  <span class="comment">// get the first element that was ever pushed into the input stack</span></div><div class="line">  <span class="keyword">if</span> (stackOutput.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span>(stackInput.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">var</span> elementToOutput = stackInput.pop();</div><div class="line">      stackOutput.push(elementToOutput);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> stackOutput.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断大括号是否闭合"><a href="#判断大括号是否闭合" class="headerlink" title="判断大括号是否闭合"></a>判断大括号是否闭合</h4><blockquote>
<p>创建一个函数来判断给定的表达式中的大括号是否闭合：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> expression = <span class="string">"&#123;&#123;&#125;&#125;&#123;&#125;&#123;&#125;"</span></div><div class="line"><span class="keyword">var</span> expressionFalse = <span class="string">"&#123;&#125;&#123;&#123;&#125;"</span>;</div><div class="line"></div><div class="line">isBalanced(expression); <span class="comment">// true</span></div><div class="line">isBalanced(expressionFalse); <span class="comment">// false</span></div><div class="line">isBalanced(<span class="string">""</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBalanced</span>(<span class="params">expression</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> checkString = expression;</div><div class="line">  <span class="keyword">var</span> stack = [];</div><div class="line"></div><div class="line">  <span class="comment">// If empty, parentheses are technically balanced</span></div><div class="line">  <span class="keyword">if</span> (checkString.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; checkString.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(checkString[i] === <span class="string">'&#123;'</span>) &#123;</div><div class="line">      stack.push(checkString[i]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkString[i] === <span class="string">'&#125;'</span>) &#123;</div><div class="line">      <span class="comment">// Pop on an empty array is undefined</span></div><div class="line">      <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        stack.pop();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// If the array is not empty, it is not balanced</span></div><div class="line">  <span class="keyword">if</span> (stack.pop()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>递归</p>
<h4 id="二进制转换"><a href="#二进制转换" class="headerlink" title="二进制转换"></a>二进制转换</h4><blockquote>
<p>通过某个递归函数将输入的数字转化为二进制字符串：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">decimalToBinary(<span class="number">3</span>); <span class="comment">// 11</span></div><div class="line">decimalToBinary(<span class="number">8</span>); <span class="comment">// 1000</span></div><div class="line">decimalToBinary(<span class="number">1000</span>); <span class="comment">// 1111101000</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decimalToBinary</span>(<span class="params">digit</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(digit &gt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">// If digit is not divisible by 2 then recursively return proceeding</span></div><div class="line">    <span class="comment">// binary of the digit minus 1, 1 is added for the leftover 1 digit</span></div><div class="line">    <span class="keyword">if</span> (digit % <span class="number">2</span>) &#123;</div><div class="line">      <span class="keyword">return</span> decimalToBinary((digit - <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Recursively return proceeding binary digits</span></div><div class="line">      <span class="keyword">return</span> decimalToBinary(digit / <span class="number">2</span>) + <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Exit condition</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveBinarySearch</span>(<span class="params">array, value, leftPosition, rightPosition</span>) </span>&#123;</div><div class="line">  <span class="comment">// Value DNE</span></div><div class="line">  <span class="keyword">if</span> (leftPosition &gt; rightPosition) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> middlePivot = <span class="built_in">Math</span>.floor((leftPosition + rightPosition) / <span class="number">2</span>);</div><div class="line">  <span class="keyword">if</span> (array[middlePivot] === value) &#123;</div><div class="line">    <span class="keyword">return</span> middlePivot;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[middlePivot] &gt; value) &#123;</div><div class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, leftPosition, middlePivot - <span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, middlePivot + <span class="number">1</span>, rightPosition);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><blockquote>
<p>判断是否为 2 的指数值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">isPowerOfTwo(<span class="number">4</span>); <span class="comment">// true</span></div><div class="line">isPowerOfTwo(<span class="number">64</span>); <span class="comment">// true</span></div><div class="line">isPowerOfTwo(<span class="number">1</span>); <span class="comment">// true</span></div><div class="line">isPowerOfTwo(<span class="number">0</span>); <span class="comment">// false</span></div><div class="line">isPowerOfTwo(<span class="number">-1</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="comment">// For the non-zero case:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwo</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">  <span class="comment">// `&amp;` uses the bitwise n.</span></div><div class="line">  <span class="comment">// In the case of number = 4; the expression would be identical to:</span></div><div class="line">  <span class="comment">// `return (4 &amp; 3 === 0)`</span></div><div class="line">  <span class="comment">// In bitwise, 4 is 100, and 3 is 011. Using &amp;, if two values at the same</span></div><div class="line">  <span class="comment">// spot is 1, then result is 1, else 0. In this case, it would return 000,</span></div><div class="line">  <span class="comment">// and thus, 4 satisfies are expression.</span></div><div class="line">  <span class="comment">// In turn, if the expression is `return (5 &amp; 4 === 0)`, it would be false</span></div><div class="line">  <span class="comment">// since it returns 101 &amp; 100 = 100 (NOT === 0)</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> number &amp; (number - <span class="number">1</span>) === <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For zero-case:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwoZeroCase</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (number !== <span class="number">0</span>) &amp;&amp; ((number &amp; (number - <span class="number">1</span>)) === <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000008397935&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文出处：王下邀月熊_Chevalier&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;JavaScript-Spec
    
    </summary>
    
    
      <category term="javascript" scheme="http://huayan.site/tags/javascript/"/>
    
      <category term="算法" scheme="http://huayan.site/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈模块化加载的实现原理</title>
    <link href="http://huayan.site/2017/05/10/%E6%B5%85%E8%B0%88%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://huayan.site/2017/05/10/浅谈模块化加载的实现原理/</id>
    <published>2017-05-10T08:51:22.000Z</published>
    <updated>2017-05-17T13:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载来自: <a href="http://caibaojian.com/module-definition.html" target="_blank" rel="external">前端开发博客</a></p>
<h2 id="浅谈模块化加载的实现原理"><a href="#浅谈模块化加载的实现原理" class="headerlink" title="浅谈模块化加载的实现原理"></a>浅谈模块化加载的实现原理</h2><p>相信很多人都用过 seajs、 requirejs 等这些模块加载器，他们都是十分便捷的工程管理工具，简化了代码的结构，更重要的是消除了各种文件依赖和命名冲突问题，并利用 AMD / CMD 规范统一了格式。如果你不太明白模块化的作用，建议看看玉伯写的<a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">一篇文章</a>。</p>
<ul>
<li><p>一是按需加载，业务越来越大，基础代码也会越来越多，开发人员可能开发了一百个小工具，而且都塞在一个叫做 utils.js 的包里，但是一个页面可能只需要三到五个小工具，如果直接去加载这个 utils.js 岂不是很大的浪费，PC 端还好，主要是无线端，省下 1KB 那都是很大的价值啊，所以呢，如今很多框架的开发都体现出细颗粒度的分化，像百度研究比较卖力的 <a href="https://github.com/BaiduFE/Tangram-base" target="_blank" rel="external">tangram</a>，阿里放满产品线的 <a href="http://docs.kissyui.com/" target="_blank" rel="external">kissy</a>，几乎是细分到了微粒程度，这种细分方式也促进了模块化加载技术的发展，比如为了减少请求数量，kissy 的 config 中开启 combo 就可以合并多个请求为一个等等。</p>
</li>
<li><p>第二点，应该也是从服务器那边参考而来的，服务器脚本很多都是以文件为单位分离的，如果要利用其它文件的功能，可以轻而易举的 require 或者 include 进来，我没有去研究这些加载函数的内部实现原理，稍微猜猜应该是把文件写入到缓存，遇到 include 之类的加载函数，暂停写入，找到需要 include 的文件地址，把找到的文件接着上面继续写入缓存，以此类推，直到结束，然后编译器进行统一编译。</p>
</li>
</ul>
<h3 id="一、模块化加载的技术原理"><a href="#一、模块化加载的技术原理" class="headerlink" title="一、模块化加载的技术原理"></a>一、模块化加载的技术原理</h3><p>先不考虑各种模块定义规范，本文目的只是简要的分析加载原理， CMD / AMD 规范虽内容然不多，但是要实现起来，工程量还是不小。文章后面会提到。</p>
<h4 id="1-数据模块的加载"><a href="#1-数据模块的加载" class="headerlink" title="1. 数据模块的加载"></a>1. 数据模块的加载</h4><p>既然是模块化加载，想办法把模块内容拿到当然是重头戏，无论是 script 还是 css 文件的加载，一个 script 或者 link 标签就可以搞定问题，不过我这里采用的是 ajax，目的是为了拿到 script 的代码，也是为了照顾后面要说的 CMD 规范。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">require</span> = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(), res;</div><div class="line">    xhr.open(<span class="string">"GET"</span>, path, <span class="literal">true</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="comment">// 获取源码</span></div><div class="line">            res = xhr.responseText;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.send();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>创建 script 标签加载脚本不会存在跨域问题，不过拿到的脚本会被浏览器立马解析出来，如果要做同异步的处理就比较麻烦了。没有跨域的文件我们就通过上面的方式加载，如果脚本跨域了，再去创建标签，让文档自己去加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 跨域处理</span></div><div class="line"><span class="keyword">if</span>(crossDomain)&#123;</div><div class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">    script.src = path;</div><div class="line"></div><div class="line">    (<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>] || <span class="built_in">document</span>.body).appendChild(script);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-解析模块的层次依赖关系"><a href="#2-解析模块的层次依赖关系" class="headerlink" title="2. 解析模块的层次依赖关系"></a>2. 解析模块的层次依赖关系</h4><p>模块之间存在依赖关系是十分正常的，如一个工程的文件结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">project/</div><div class="line">├── css/</div><div class="line">│   └── main.css</div><div class="line">├── js/</div><div class="line">│   ├── require.js</div><div class="line">│   └── modlues/</div><div class="line">│     ├── a.js</div><div class="line">│     ├── b.js</div><div class="line">│     └── c.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p>而这里几个模块的依赖关系是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">            ┌&gt; a.js -&gt; b.js</div><div class="line">index.html -|</div><div class="line">            └&gt; c.js</div><div class="line"></div><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">"./js/test/b.js"</span>);</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"i am b"</span>);</div><div class="line"></div><div class="line"><span class="comment">// c.js</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"i am c"</span>);</div></pre></td></tr></table></figure>
<p>我们要从 index.html 中利用 require.js 获取这一连串的依赖关系，一般采用的方式就是正则匹配。如下：先拿到 function 的代码，然后正则匹配出第一层的依赖关系，接着加载匹配到关系的代码，继续匹配。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// index.html</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./js/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">"./js/modlues/a.js"</span>);</div><div class="line">        <span class="keyword">var</span> c = <span class="built_in">require</span>(<span class="string">"./js/modlues/c.js"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// toString 方法可以拿到 test 函数的 code</span></div><div class="line">    start(test.toString());</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>整个函数的入口是 start，正则表达式为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r = <span class="regexp">/require\((.*)\)/g</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">while</span>(match = r.exec(str)) &#123;</div><div class="line">        <span class="built_in">console</span>.log(match[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>由此我们拿到了第一层的依赖关系，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"./js/modlues/a.js"</span>, <span class="string">"./js/modlues/c.js"</span>]</div></pre></td></tr></table></figure></p>
<p>接着要拿到 a.js 和 b.js 的文件层次依赖，之前我们写了一个 require 函数，这个函数可以拿到脚本的代码内容，不过这个 require 函数要稍微修改下，递归去查询和下载代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">while</span>(match = r.exec(str)) &#123;</div><div class="line">        <span class="built_in">console</span>.log(match &amp;&amp; match[<span class="number">1</span>]);</div><div class="line">        <span class="comment">// 如果匹配到了内容，下载 path 对应的源码</span></div><div class="line">        match &amp;&amp; match[<span class="number">1</span>] &amp;&amp; <span class="built_in">require</span>(match[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="built_in">require</span> = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest(), res;</div><div class="line">    xhr.open(<span class="string">"GET"</span>, path, <span class="literal">true</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</div><div class="line">            res = xhr.responseText;</div><div class="line">            <span class="comment">// 缓存文件</span></div><div class="line">            cache[path] = res;</div><div class="line">            <span class="comment">// 继续递归匹配</span></div><div class="line">            start(res);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.send();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码已经可以很好地拿到文件递归关系了:<br><img src="1.jpg"></p>
<h4 id="3-添加事件机制，优化管理代码"><a href="#3-添加事件机制，优化管理代码" class="headerlink" title="3. 添加事件机制，优化管理代码"></a>3. 添加事件机制，优化管理代码</h4><p>但是我们有必要先把 responseText 缓存起来，如果不缓存文件，直接 eval 得到的 responseText 代码，想想会发生什么问题~ 如果模块之间存在循环引用，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">            ┌&gt; a.js -&gt; b.js</div><div class="line">index.html -|</div><div class="line">            └&gt; b.js -&gt; a.js</div></pre></td></tr></table></figure>
<p>那 start 和 require 将会陷入死循环，不断的加载代码。所以我们需要先拿到依赖关系，然后解构关系，分析出我们需要加载哪些模块。值得注意的是，我们必须按照加载的顺序去 eval 代码，如果 a 依赖 b，先去执行 a 的话，一定会报错！</p>
<p>有两个问题我纠结了半天，上面的请求方式，何时会结束？用什么方式去记录文件依赖关系？</p>
<p>最后还是决定将 start 和 require 两个函数的相互递归修改成一个函数的递归。用一个对象，发起请求时把 URL 作为 key，在这个对象里保存 XHR 对象，XHR 对象请求完成后，把抓取到的新请求再用同样的方式放入这个对象中，同时从这个对象中把自己删除掉，然后判断这个对象上是否存在 key， 如果存在说明还有 XHR 对象没完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> r = <span class="regexp">/require\(\s*"(.*)"\s*\)/g</span>;</div><div class="line"><span class="keyword">var</span> cache = &#123;&#125;;    <span class="comment">// 文件缓存</span></div><div class="line"><span class="keyword">var</span> relation = []; <span class="comment">// 依赖过程控制</span></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;      <span class="comment">// xhr 管理对象</span></div><div class="line"></div><div class="line"><span class="comment">//辅助函数，获取键值数组</span></div><div class="line"><span class="built_in">Object</span>.keys = <span class="built_in">Object</span>.keys || <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">　　  <span class="keyword">var</span> a = [];</div><div class="line">　　  <span class="keyword">for</span>(a[a.length] <span class="keyword">in</span> obj);</div><div class="line">　　  <span class="keyword">return</span> a ;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 入口函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    <span class="keyword">while</span>(match = r.exec(str))&#123;</div><div class="line">        obj[match[<span class="number">1</span>]] = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">        <span class="built_in">require</span>(obj[match[<span class="number">1</span>]], match[<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 递归请求</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">require</span> = <span class="function"><span class="keyword">function</span>(<span class="params">xhr, path</span>)</span>&#123;</div><div class="line">    <span class="comment">//记录依赖过程</span></div><div class="line">    relation.push(path);</div><div class="line"></div><div class="line">    xhr.open(<span class="string">"GET"</span>, path, <span class="literal">true</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</div><div class="line">            <span class="keyword">var</span> res = xhr.responseText;</div><div class="line">            <span class="comment">// 缓存文件</span></div><div class="line">            cache[path] = res;</div><div class="line">            <span class="comment">// 从xhr对象管理器中删除已经加载完毕的函数</span></div><div class="line">            <span class="keyword">delete</span> obj[path];</div><div class="line"></div><div class="line">            <span class="comment">// 如果obj为空则触发 allLoad 事件</span></div><div class="line">            <span class="built_in">Object</span>.keys(obj).length == <span class="number">0</span> ? Event.trigger(<span class="string">"allLoad"</span>) : <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">            <span class="comment">//递归条件</span></div><div class="line">            <span class="keyword">while</span>(match = r.exec(res))&#123;</div><div class="line">                obj[match[<span class="number">1</span>]] = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                <span class="built_in">require</span>(obj[match[<span class="number">1</span>]], match[<span class="number">1</span>]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xhr.send();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码已经基本完成了文件依赖分析，文件的加载和缓存工作了</p>
<ol>
<li>CMD 规范的介绍</li>
</ol>
<p>上面写了一大堆内容，也实现了模块加载器的原型，但是放在实际应用中，他就是个废品，回到最开始，我们为什么要使用模块化加载。目的是为了不去使用麻烦的命名空间，把复杂的模块依赖交给 require 这个函数去管理，但实际上呢，上面拿到的所有模块都是暴露在全局变量中的，也就是说，如果 a.js 和 b.js 中存在命名相同的变量，后者将会覆盖前者，这是我们不愿意看到的。为了处理此类问题，我们有必要把所有的模块都放到一个闭包中，这样一来，只要不使用 window.vars 命名，闭包之间的变量是不会相互影响的。我们可以使用自己的方式去管理代码，不过有人已经研究处理一套标准，而且是全球统一，那就拿着用吧~</p>
<p>关于 CMD 规范，我这里就不多说了，可以去看看草案，玉伯也翻译了一份，戳我。每一模块有且仅有一个对外公开的接口 exports，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 对外提供 foo 属性</span></div><div class="line">  exports.foo = <span class="string">'bar'</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 对外提供 doSomething 方法</span></div><div class="line">  exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>剩下的工作就是针对 CMD 规范写一套符合标准的代码接口，这个比较琐碎，就不写了。</p>
<h3 id="二、额外的话题"><a href="#二、额外的话题" class="headerlink" title="二、额外的话题"></a>二、额外的话题</h3><p>上面的代码中提到了关于 Event 的事件管理。在模块全部加在完毕之后，需要有个东西告诉你，所以顺手写了一个 Event 的事件管理器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Event</span></div><div class="line"><span class="keyword">var</span> Event = &#123;&#125;;</div><div class="line">Event.events = [];</div><div class="line">Event.on = <span class="function"><span class="keyword">function</span>(<span class="params">evt, func</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Event.events.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(Event.events[i].evt == evt)&#123;</div><div class="line">            Event.events[i].func.push(func);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Event.events.push(&#123;</div><div class="line">        <span class="attr">evt</span>: evt,</div><div class="line">        <span class="attr">func</span>: [func]</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">Event.trigger = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Event.events.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(Event.events[i].evt == evt)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; Event.events[i].func.length; j++)&#123;</div><div class="line">                Event.events[i].func[j]();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Event.off = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Event.events.length; i++)&#123;</div><div class="line">        Event.events.splice(i, <span class="number">1</span>);</div><div class="line">    &#125;       </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我觉得 seajs 是一个很不错的模块加载器，如果感兴趣，可以去看看他的源码实现，代码不长，只有一千多行。模块的加载它采用的是创建文本节点，让文档去加载模块，实时查看状态为 interactive 的 script 标签，如果处于交互状态就拿到他的代码，接着删除节点。当节点数目为 0 的时候，加载工作完成。</p>
<p>本文没有考虑 css 文件的加载问题，我们可以把它当做一个没有 require 关键词的 js 文件，或者把它匹配出来之后另作处理，因为他是不可能存在模块依赖关系的。</p>
<h3 id="三、参考资料"><a href="#三、参考资料" class="headerlink" title="三、参考资料"></a>三、参考资料</h3><p><a href="https://github.com/seajs/issues" target="_blank" rel="external">seajs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载来自: &lt;a href=&quot;http://caibaojian.com/module-definition.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;浅谈模块化加载的实现原理&quot;&gt;&lt;a href=
    
    </summary>
    
    
      <category term="模块化" scheme="http://huayan.site/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="AMD" scheme="http://huayan.site/tags/AMD/"/>
    
      <category term="CMD" scheme="http://huayan.site/tags/CMD/"/>
    
      <category term="requirejs" scheme="http://huayan.site/tags/requirejs/"/>
    
  </entry>
  
</feed>
